// Generated by CoffeeScript 1.9.3
(function() {
  var HOME_PAGE, Promise, sequelize;

  HOME_PAGE = '/';

  sequelize = require('sequelize');

  Promise = require('sequelize').Promise;

  exports.postSend = function(req, res) {
    var User;
    User = global.db.models.user;
    return Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var Util;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      Util = global.myUtil;
      if (typeof req.body.receivers === 'string') {
        req.body.receivers = JSON.parse(req.body.receivers);
      }
      return Util.message.send({
        title: req.body.title,
        html: req.body.html,
        text: req.body.text,
        senderId: user.id,
        receivers: req.body.receivers
      });
    }).then(function(result) {
      return res.json({
        status: 1,
        msg: "Success",
        message: result[0]
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postReceive = function(req, res) {
    var Message, User;
    Message = global.db.models.message;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var base;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if ((base = req.body).lastMessage == null) {
        base.lastMessage = 0;
      }
      return Message.findAll({
        where: {
          id: (req.body.oldMessage ? {
            $gt: req.body.lastMessage,
            $lt: req.body.oldMessage
          } : {
            $gt: req.body.lastMessage
          }),
          status: 'unread'
        },
        include: [
          {
            model: User,
            as: 'receivers',
            where: {
              id: user.id
            }
          }
        ],
        order: [['id', 'DESC']]
      });
    }).then(function(messages) {
      return res.json({
        status: 1,
        msg: "Success",
        messages: messages
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postSent = function(req, res) {
    var Message, User;
    Message = global.db.models.message;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var base;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if ((base = req.body).lastMessage == null) {
        base.lastMessage = 0;
      }
      return Message.findAll({
        where: {
          id: (req.body.oldMessage ? {
            $gt: req.body.lastMessage,
            $lt: req.body.oldMessage
          } : {
            $gt: req.body.lastMessage
          })
        },
        include: [
          {
            model: User,
            as: 'sender',
            where: {
              id: user.id
            }
          }, {
            model: User,
            as: 'receivers'
          }
        ],
        order: [['id', 'DESC']]
      });
    }).then(function(messages) {
      return res.json({
        status: 1,
        msg: "Success",
        messages: messages
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postRead = function(req, res) {
    var Message, User;
    Message = global.db.models.message;
    User = global.db.models.user;
    if (typeof req.body.messages === 'string') {
      req.body.messages = JSON.parse(req.body.messages);
    }
    return Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      return user.getMessages({
        where: {
          id: req.body.messages
        }
      });
    }).then(function(messages) {
      var message;
      return Message.update({
        status: 'read'
      }, {
        where: {
          id: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = messages.length; i < len; i++) {
              message = messages[i];
              results.push(message.id);
            }
            return results;
          })()
        }
      });
    }).then(function() {
      return res.json({
        status: 1,
        msg: "Success"
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
