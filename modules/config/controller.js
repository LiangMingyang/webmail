// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, mailer;

  mailer = require('nodemailer');

  Promise = require('sequelize').Promise;

  exports.getDetail = function(req, res) {
    var User;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (user.privilege !== 'admin') {
        throw new global.myError.InvalidAccess();
      }
      return res.json({
        status: 1,
        msg: "Success",
        config: global.myConfig.mail.auth
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postEdit = function(req, res) {
    var User;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var config, service, transporter;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (user.privilege !== 'admin') {
        throw new global.myError.InvalidAccess();
      }
      service = req.body.mailaddr.split('@');
      switch (service[service.length - 1]) {
        case 'buaa.edu.cn':
          service = 'buaa';
          break;
        case 'qq.com':
          service = 'qq';
          break;
        case '163.com':
          service = '163';
          break;
        default:
          throw new Error("Unknown email-address");
      }
      service = global.myConfig.mail[service];
      service.auth = {
        mailaddr: req.body.mailaddr,
        username: req.body.username,
        password: req.body.password
      };
      global.myMail.stopGettingMail();
      global.myMail.initMailConfig(service);
      global.myMail.startGettingMail();
      config = service;
      transporter = mailer.createTransport({
        host: config.smtp.host,
        port: config.smtp.port,
        secure: true,
        auth: {
          user: config.auth.mailaddr,
          pass: config.auth.password
        }
      });
      global.transporter = Promise.promisifyAll(transporter, {
        suffix: 'Promised'
      });
      return res.json({
        status: 1,
        msg: "Success",
        config: config.auth
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
