// Generated by CoffeeScript 1.9.3
(function() {
  var HOME_PAGE, Promise, TAG_ASSIGNED, TAG_AUDITED, TAG_FINISHED, TAG_HANDLED, TAG_RECEIVED, sequelize;

  HOME_PAGE = '/';

  sequelize = require('sequelize');

  Promise = sequelize.Promise;

  TAG_RECEIVED = 1;

  TAG_ASSIGNED = 2;

  TAG_HANDLED = 3;

  TAG_AUDITED = 4;

  TAG_FINISHED = 5;

  exports.postList = function(req, res) {
    var Tag, User;
    Tag = global.db.models.tag;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var Inbox, base, base1, base2, where;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      Inbox = global.db.models.inbox;
      if ((base = req.body).offset == null) {
        base.offset = 0;
      }
      if ((base1 = req.body).limit == null) {
        base1.limit = 20;
      }
      if ((base2 = req.body).lastMail == null) {
        base2.lastMail = 0;
      }
      if (typeof req.body.tags === "string") {
        req.body.tags = JSON.parse(req.body.tags);
      }
      where = {
        id: (req.body.oldMail ? {
          $lt: req.body.oldMail,
          $gt: req.body.lastMail
        } : {
          $gt: req.body.lastMail
        }),
        status: (function() {
          switch (user.privilege) {
            case 'auditor':
              return 'handled';
            default:
              return void 0;
          }
        })(),
        dispatcherId: (function() {
          switch (user.privilege) {
            case 'dispatcher':
              return {
                $or: [null, user.id]
              };
            default:
              return void 0;
          }
        })()
      };
      where = JSON.parse(JSON.stringify(where));
      return Inbox.findAndCountAll({
        where: where,
        include: [
          {
            model: Tag,
            where: req.body.tags ? {
              id: req.body.tags
            } : void 0
          }, {
            model: User,
            as: 'assignees',
            where: user.privilege === 'consumer' ? {
              id: user.id
            } : void 0
          }, {
            model: User,
            as: 'dispatcher'
          }
        ],
        limit: req.body.limit,
        order: [['id', 'DESC']]
      });
    }).then(function(result) {
      return res.json({
        status: 1,
        msg: "Success",
        mails: result.rows,
        count: result.count
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postDetail = function(req, res) {
    var Tag, User;
    User = global.db.models.user;
    Tag = global.db.models.tag;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var Inbox, base, where;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      Inbox = global.db.models.inbox;
      if ((base = req.body).mail == null) {
        base.mail = null;
      }
      where = {
        id: req.body.mail,
        status: (function() {
          switch (user.privilege) {
            case 'dispatcher':
              return 'received';
            case 'auditor':
              return 'handled';
            default:
              return void 0;
          }
        })(),
        dispatcherId: (function() {
          switch (user.privilege) {
            case 'dispatcher':
              return {
                $or: [null, user.id]
              };
            default:
              return void 0;
          }
        })()
      };
      where = JSON.parse(JSON.stringify(where));
      return Inbox.find({
        where: where,
        include: [
          {
            model: Tag
          }, {
            model: User,
            as: 'assignees',
            where: user.privilege === 'consumer' ? {
              id: user.id
            } : void 0
          }, {
            model: User,
            as: 'dispatcher'
          }
        ]
      });
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      return res.json({
        status: 1,
        msg: "Success",
        mail: mail
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postDispatch = function(req, res) {
    var Inbox, User, currentDispatcher, currentMail;
    User = global.db.models.user;
    Inbox = global.db.models.inbox;
    currentMail = void 0;
    currentDispatcher = void 0;
    return global.db.Promise.resolve().then(function() {
      if (!req.session.user) {
        throw new global.myError.UnknownUser();
      }
      return User.findById(req.session.user.id);
    }).then(function(dispatcher) {
      var ref;
      if (!dispatcher) {
        throw new global.myError.UnknownUser();
      }
      if (!((ref = dispatcher.privilege) === 'dispatcher' || ref === 'admin')) {
        throw new global.myError.InvalidAccess();
      }
      currentDispatcher = dispatcher;
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      currentMail = mail;
      if (typeof req.body.consumers === 'string') {
        req.body.consumers = JSON.parse(req.body.consumers);
      }
      return mail.setAssignees(req.body.consumers);
    }).then(function() {
      return currentMail.setDispatcher(currentDispatcher);
    }).then(function(mail) {
      mail.status = 'assigned';
      return mail.save();
    }).then(function(mail) {
      var message;
      message = {
        title: "新任务",
        html: "<p>你被" + currentDispatcher.username + "指派了任务" + mail.id + "</p>",
        text: "你被" + currentDispatcher.username + "指派了任务" + mail.id,
        receivers: req.body.consumers
      };
      return Promise.all([mail.addTags([TAG_ASSIGNED]), mail.removeTags([TAG_RECEIVED]), global.myUtil.message.send(message)]);
    }).then(function() {
      return res.json({
        status: 1,
        msg: "Success"
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postHandle = function(req, res) {
    var Outbox, User, currentConsumer, currentMail, currentReplyTo;
    User = global.db.models.user;
    Outbox = global.db.models.outbox;
    currentConsumer = void 0;
    currentReplyTo = void 0;
    currentMail = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var mail, ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (!((ref = user.privilege) === 'admin' || ref === 'consumer')) {
        throw new global.myError.InvalidAccess();
      }
      currentConsumer = user;
      mail = Outbox.build(req.body);
      if (req.body.urgent === '1') {
        mail.status = 'audited';
      } else {
        mail.status = 'handled';
      }
      currentMail = mail;
      return mail.getReplyTo();
    }).then(function(replyTo) {
      if (!replyTo) {
        return true;
      }
      currentReplyTo = replyTo;
      return replyTo.hasAssignee(currentConsumer);
    }).then(function(exist) {
      var message;
      if (!exist) {
        throw new global.myError.InvalidAccess();
      }
      if (currentReplyTo.status === 'handled') {
        throw new global.myError.Conflict();
      }
      currentReplyTo.status = 'handled';
      message = {
        title: "任务得到了处理",
        html: "<p>你指派的任务，标题为" + currentReplyTo.title + "得到了处理</p>",
        text: "你指派的任务，标题为" + currentReplyTo.title + "得到了处理",
        receivers: [currentReplyTo.dispatcherId]
      };
      Promise.all([currentReplyTo.addTags([TAG_HANDLED]), currentReplyTo.removeTags([TAG_ASSIGNED]), global.myUtil.message.send(message)]);
      return currentReplyTo.save();
    }).then(function() {
      return currentReplyTo.setConsumer(currentConsumer.id);
    }).then(function() {
      return currentMail.save();
    }).then(function(mail) {
      return mail.setConsumer(currentConsumer);
    }).then(function(mail) {
      return res.json({
        status: 1,
        msg: "Success",
        mail: mail
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postUpdate = function(req, res) {
    var Inbox, User, currentMail;
    User = global.db.models.user;
    Inbox = global.db.models.inbox;
    currentMail = void 0;
    return global.db.Promise.resolve().then(function() {
      if (!req.session.user) {
        throw new global.myError.UnknownUser();
      }
      return User.findById(req.session.user.id);
    }).then(function(user) {
      var ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (!((ref = user.privilege) === 'admin' || ref === 'dispatcher')) {
        throw new global.myError.InvalidAccess();
      }
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      if (req.body.deadline) {
        mail.deadline = new Date(req.body.deadline);
      }
      return mail.save();
    }).then(function(mail) {
      currentMail = mail;
      if (!req.body.tags) {
        return void 0;
      }
      if (typeof req.body.tags === 'string') {
        req.body.tags = JSON.parse(req.body.tags);
      }
      if (req.body.tags) {
        return currentMail.setTags(req.body.tags);
      }
    }).then(function() {
      return res.json({
        status: 1,
        mail: currentMail,
        msg: "Success"
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postReturn = function(req, res) {
    var Inbox, User, currentMail, currentUser;
    User = global.db.models.user;
    Inbox = global.db.models.inbox;
    currentUser = void 0;
    currentMail = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if ((ref = user.privilege) !== 'admin' && ref !== 'consumer') {
        throw new global.myError.InvalidAccess();
      }
      currentUser = user;
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      if (mail.status !== 'assigned') {
        throw new global.myError.InvalidAccess();
      }
      currentMail = mail;
      return mail.setAssignees([]);
    }).then(function() {
      currentMail.status = 'received';
      return currentMail.save();
    }).then(function(mail) {
      return res.json({
        status: 1,
        msg: 'Success',
        mail: mail
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postFinish = function(req, res) {
    var Inbox, User, currentUser;
    User = global.db.models.user;
    Inbox = global.db.models.inbox;
    currentUser = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if ((ref = user.privilege) !== 'admin' && ref !== 'consumer') {
        throw new global.myError.InvalidAccess();
      }
      currentUser = user;
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      if (mail.status !== 'assigned') {
        throw new global.myError.InvalidAccess();
      }
      mail.status = 'finished';
      return mail.save();
    }).then(function(mail) {
      return mail.setConsumer(currentUser);
    }).then(function(mail) {
      return res.json({
        status: 1,
        msg: 'Success',
        mail: mail
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postTrans = function(req, res) {
    var Inbox, User, currentMail, currentUser;
    User = global.db.models.user;
    Inbox = global.db.models.inbox;
    currentMail = void 0;
    currentUser = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (!((ref = user.privilege) === 'admin' || ref === 'consumer')) {
        throw new global.myError.InvalidAccess();
      }
      currentUser = user;
      return User.findById(req.body.assignee);
    }).then(function(assignee) {
      if (!assignee) {
        throw new global.myError.UnknownUser();
      }
      if (assignee.privilege !== 'consumer') {
        throw new global.myError.InvalidAccess();
      }
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      currentMail = mail;
      return Promise.all([
        mail.removeAssignees(req.session.user.id), mail.addAssignees(req.body.assignee), global.myUtil.message.send({
          title: "新任务",
          html: "<p>你被" + currentUser.username + "转发了，标题为" + mail.title + "的任务</p>",
          text: "你被" + currentUser.username + "转发了，标题为" + mail.title + "的任务",
          receivers: [req.body.assignee],
          senderId: req.session.user.id
        })
      ]);
    }).then(function() {
      return res.json({
        status: 1,
        msg: "Success",
        mail: currentMail
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

  exports.postHurry = function(req, res) {
    var Inbox, User, currentDispatcher, currentMail;
    Inbox = global.db.models.inbox;
    User = global.db.models.user;
    currentDispatcher = void 0;
    currentMail = void 0;
    return Promise.resolve().then(function() {
      if (req.session.user) {
        return User.findById(req.session.user.id);
      }
    }).then(function(user) {
      var ref;
      if (!user) {
        throw new global.myError.UnknownUser();
      }
      if (!((ref = user.privilege) === 'admin' || ref === 'dispatcher')) {
        throw new global.myError.InvalidAccess();
      }
      currentDispatcher = user;
      return Inbox.findById(req.body.mail);
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.UnknownMail();
      }
      if (mail.status !== 'assigned' || mail.dispatcherId !== currentDispatcher.id) {
        throw new global.myError.InvalidAccess();
      }
      currentMail = mail;
      return mail.getAssignees();
    }).then(function(assignees) {
      var assignee, message;
      message = {
        title: "赶紧处理你的邮件!",
        html: "<p>你被指派的任务邮件，标题为" + currentMail.title + "请尽快处理</p>",
        text: "你被指派的任务邮件，标题为" + currentMail.title + "请尽快处理",
        receivers: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = assignees.length; i < len; i++) {
            assignee = assignees[i];
            results.push(assignee.id);
          }
          return results;
        })(),
        senderId: currentDispatcher.id
      };
      return global.myUtil.message.send(message);
    }).then(function() {
      return res.json({
        status: 1,
        msg: "Success"
      });
    })["catch"](function(err) {
      return res.json({
        status: 0,
        msg: err.message
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
