// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, isStopped, mailer, promiseWhile, work;

  Promise = require('sequelize').Promise;

  mailer = require('nodemailer');

  isStopped = false;

  promiseWhile = function(action, mailSender) {
    var my_loop, resolver;
    resolver = Promise.defer();
    my_loop = function() {
      if (isStopped) {
        return resolver.resolve();
      }
      return Promise.cast(action(mailSender)).then(my_loop)["catch"](resolver.reject);
    };
    process.nextTick(my_loop);
    return resolver.promise;
  };

  work = function(mailSender) {
    var currentMail;
    currentMail = void 0;
    return global.db.models.outbox.find({
      where: {
        status: 'audited'
      }
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.NoTask();
      }
      currentMail = mail;
      return mailSender.sendMailPromised({
        to: mail.to,
        from: "<12211010@buaa.edu.cn>",
        subject: mail.title,
        html: mail.html
      });
    }).then(function(info) {
      currentMail.status = 'finished';
      return currentMail.save();
    })["catch"](global.myError.NoTask, function(err) {
      return Promise.delay(2000);
    })["catch"](function(err) {
      console.log(err);
      if (currentMail) {
        currentMail.status = "failed";
        return currentMail.save();
      }
    });
  };

  module.exports = function(config) {
    var transporter;
    transporter = mailer.createTransport({
      host: config.smtp.host,
      port: config.smtp.port,
      secure: true,
      auth: {
        user: config.auth.mailaddr,
        pass: config.auth.password
      }
    });
    transporter = Promise.promisifyAll(transporter, {
      suffix: 'Promised'
    });
    return promiseWhile(work, transporter);
  };

}).call(this);

//# sourceMappingURL=sendmaild.js.map
