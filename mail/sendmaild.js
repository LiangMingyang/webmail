// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, TAG_ASSIGNED, TAG_AUDITED, TAG_FINISHED, TAG_HANDLED, TAG_RECEIVED, config, isStopped, mailer, promiseWhile, work;

  Promise = require('sequelize').Promise;

  mailer = require('nodemailer');

  config = require('../config');

  isStopped = false;

  TAG_RECEIVED = 1;

  TAG_ASSIGNED = 2;

  TAG_HANDLED = 3;

  TAG_AUDITED = 4;

  TAG_FINISHED = 5;

  promiseWhile = function(action, mailSender) {
    var my_loop, resolver;
    resolver = Promise.defer();
    my_loop = function() {
      if (isStopped) {
        return resolver.resolve();
      }
      return Promise.cast(action(mailSender)).then(my_loop)["catch"](resolver.reject);
    };
    process.nextTick(my_loop);
    return resolver.promise;
  };

  work = function(mailSender) {
    var currentMail;
    currentMail = void 0;
    return global.db.models.outbox.find({
      where: {
        status: 'audited'
      }
    }).then(function(mail) {
      if (!mail) {
        throw new global.myError.NoTask();
      }
      currentMail = mail;
      return mailSender.sendMailPromised({
        to: mail.to,
        from: "Saaby<" + config.mail.auth.mailaddr + ">",
        subject: mail.title,
        html: mail.html
      });
    }).then(function() {
      currentMail.status = 'finished';
      return currentMail.save();
    }).then(function(mail) {
      return mail.getReplyTo();
    }).then(function(mail) {
      var message;
      mail.status = "finished";
      message = {
        title: "��ָ�ɵ������Ѿ�������",
        html: "<p>��ָ�ɵ�����" + mail.id + "�Ѿ�������</p>",
        text: "��ָ�ɵ�����" + mail.id + "�Ѿ�������",
        receivers: [mail.dispatcherId]
      };
      return Promise.all([mail.save(), mail.addTags([TAG_FINISHED]), mail.removeTags([TAG_HANDLED]), global.myUtil.message.send(message)]);
    })["catch"](global.myError.NoTask, function() {
      return Promise.delay(2000);
    })["catch"](function(err) {
      console.log(err);
      if (currentMail) {
        currentMail.status = "failed";
        currentMail.reason += (new Date()) + "\n" + err.message + "\n";
        return currentMail.save();
      }
    });
  };

  module.exports = function(config) {
    var transporter;
    transporter = mailer.createTransport({
      host: config.smtp.host,
      port: config.smtp.port,
      secure: true,
      auth: {
        user: config.auth.mailaddr,
        pass: config.auth.password
      }
    });
    transporter = Promise.promisifyAll(transporter, {
      suffix: 'Promised'
    });
    return promiseWhile(work, transporter);
  };

}).call(this);

//# sourceMappingURL=sendmaild.js.map
