// Generated by CoffeeScript 1.9.3
(function() {
  var Conflict, InvalidAccess, LoginError, NoTask, UnknownMail, UnknownUser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UnknownUser = (function(superClass) {
    extend(UnknownUser, superClass);

    function UnknownUser(message) {
      this.message = message != null ? message : "Unknown user.";
      this.name = 'UnknownUser';
      Error.captureStackTrace(this, UnknownUser);
    }

    return UnknownUser;

  })(Error);

  LoginError = (function(superClass) {
    extend(LoginError, superClass);

    function LoginError(message) {
      this.message = message != null ? message : "Wrong password or username.";
      this.name = 'LoginError';
      Error.captureStackTrace(this, LoginError);
    }

    return LoginError;

  })(Error);

  InvalidAccess = (function(superClass) {
    extend(InvalidAccess, superClass);

    function InvalidAccess(message) {
      this.message = message != null ? message : "Invalid access.";
      this.name = 'InvalidAccess';
      Error.captureStackTrace(this, InvalidAccess);
    }

    return InvalidAccess;

  })(Error);

  UnknownMail = (function(superClass) {
    extend(UnknownMail, superClass);

    function UnknownMail(message) {
      this.message = message != null ? message : "Unknown mail.";
      this.name = 'UnknownMail';
      Error.captureStackTrace(this, UnknownMail);
    }

    return UnknownMail;

  })(Error);

  NoTask = (function(superClass) {
    extend(NoTask, superClass);

    function NoTask(message) {
      this.message = message != null ? message : "No task and please wait.";
      this.name = 'NoTask';
      Error.captureStackTrace(this, NoTask);
    }

    return NoTask;

  })(Error);

  Conflict = (function(superClass) {
    extend(Conflict, superClass);

    function Conflict(message) {
      this.message = message != null ? message : "Conflict!";
      this.name = 'Conflict';
      Error.captureStackTrace(this, Conflict);
    }

    return Conflict;

  })(Error);

  module.exports = {
    UnknownUser: UnknownUser,
    LoginError: LoginError,
    InvalidAccess: InvalidAccess,
    UnknownMail: UnknownMail,
    NoTask: NoTask,
    Conflict: Conflict
  };

}).call(this);

//# sourceMappingURL=index.js.map
